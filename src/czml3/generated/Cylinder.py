# generated by datamodel-codegen:
#   filename:  Cylinder.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field

from . import Integer, LabelStyle


class BooleanValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a boolean.',
    )


class BooleanValue(BaseModel):
    __root__: bool = Field(..., description='A boolean value.')


class DoubleValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a floating-point number.',
    )


class DoubleValue(BaseModel):
    __root__: Union[float, List[Any]] = Field(
        ...,
        description='A floating-point number. The value may be a single number, or an array with one element, in which case the value is constant. If it is an array with two or more elements, they are time-tagged samples arranged as `[Time, Value, Time, Value, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
    )


class HeightReferenceValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a height reference.',
    )


class HeightReferenceValue(BaseModel):
    __root__: str = Field(
        ...,
        description="The height reference of an object, which indicates if the object's position is relative to terrain or not.",
    )


class RgbaValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255.',
    )


class RgbafValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0.',
    )


class RgbaValue(BaseModel):
    """
    A color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255. If the array has four elements, the color is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, Red, Green, Blue, Alpha, Time, Red, Green, Blue, Alpha, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255. If the array has four elements, the color is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, Red, Green, Blue, Alpha, Time, Red, Green, Blue, Alpha, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='Rgba',
    )


class RgbafValue(BaseModel):
    """
    A color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0. If the array has four elements, the color is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, Red, Green, Blue, Alpha, Time, Red, Green, Blue, Alpha, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0. If the array has four elements, the color is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, Red, Green, Blue, Alpha, Time, Red, Green, Blue, Alpha, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='Rgbaf',
    )


class UriValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a URI.',
    )


class UriValue(BaseModel):
    __root__: str = Field(..., description='A URI value.')


class Cartesian2ValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a two-dimensional Cartesian.',
    )


class Cartesian2Value(BaseModel):
    """
    A two-dimensional Cartesian value specified as `[X, Y]`. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, X, Y, Time, X, Y, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A two-dimensional Cartesian value specified as `[X, Y]`. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, X, Y, Time, X, Y, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='Cartesian2',
    )


class LineCount(BaseModel):
    """
    The number of grid lines along each axis.
    """

    cartesian2: Optional[Cartesian2Value] = Field(
        None, description='The number of grid lines along each axis.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The number of grid lines along each axis specified as a reference to another property.',
    )


class LineThickness(BaseModel):
    """
    The thickness of grid lines along each axis, in pixels.
    """

    cartesian2: Optional[Cartesian2Value] = Field(
        None,
        description='The thickness specified as a two-dimensional Cartesian value `[X, Y]`, in pixels.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The thickness specified as a reference to another property.'
    )


class LineOffset(BaseModel):
    """
    The offset of grid lines along each axis, as a percentage from 0 to 1.
    """

    cartesian2: Optional[Cartesian2Value] = Field(
        None,
        description='The offset of grid lines along each axis, specified as a percentage from 0 to 1.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The offset of grid lines along each axis specified as a reference to another property.',
    )


class StripeOrientationValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a stripe orientation.',
    )


class StripeOrientationValue(BaseModel):
    __root__: str = Field(
        ..., description='The orientation of stripes in the stripe material.'
    )


class Integer(BaseModel):
    """
    An integer number.
    """

    number: Optional[Integer.IntegerValue] = Field(None, description='The integer.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The integer specified as a reference to another property.'
    )


class ShadowModeValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a shadow mode.',
    )


class ShadowModeValue(BaseModel):
    __root__: str = Field(
        ...,
        description='Whether or not an object casts or receives shadows from each light source when shadows are enabled.',
    )


class DistanceDisplayConditionValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as two values `[NearDistance, FarDistance]`.',
    )


class DistanceDisplayConditionValue(BaseModel):
    """
    A value indicating the visibility of an object based on the distance to the camera, specified as two values `[NearDistance, FarDistance]`. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, NearDistance, FarDistance, Time, NearDistance, FarDistance, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A value indicating the visibility of an object based on the distance to the camera, specified as two values `[NearDistance, FarDistance]`. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, NearDistance, FarDistance, Time, NearDistance, FarDistance, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='DistanceDisplayCondition',
    )


class Boolean(BaseModel):
    """
    A boolean value.
    """

    boolean: Optional[BooleanValue] = Field(None, description='The boolean value.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The boolean specified as a reference to another property.'
    )


class Double(BaseModel):
    """
    A floating-point number.
    """

    number: Optional[DoubleValue] = Field(None, description='The number.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The number specified as a reference to another property.'
    )


class HeightReference(BaseModel):
    """
    The height reference of an object, which indicates if the object's position is relative to terrain or not.
    """

    heightReference: Optional[HeightReferenceValue] = Field(
        None, description='The height reference.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The height reference specified as a reference to another property.',
    )


class Color(BaseModel):
    """
    A color. The color can optionally vary over time.
    """

    rgba: Optional[RgbaValue] = Field(
        None,
        description='The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.',
    )
    rgbaf: Optional[RgbafValue] = Field(
        None,
        description='The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The color specified as a reference to another property.'
    )


class Uri(BaseModel):
    """
    A URI value. The URI can optionally vary with time.
    """

    uri: Optional[UriValue] = Field(None, description='The URI value.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The URI specified as a reference to another property.'
    )


class Repeat(BaseModel):
    """
    The number of times an image repeats along each axis.
    """

    cartesian2: Optional[Cartesian2Value] = Field(
        None, description='The number of times the image repeats along each axis.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The number of times the image repeats specified as a reference to another property.',
    )


class GridMaterial(BaseModel):
    """
    A material that fills the surface with a two-dimensional grid.
    """

    color: Optional[Color] = Field('white', description='The color of the surface.')
    cellAlpha: Optional[Double] = Field(
        0.1,
        description='The alpha value for the space between grid lines. This will be combined with the color alpha.',
    )
    lineCount: Optional[LineCount] = Field(
        '[8, 8]', description='The number of grid lines along each axis.'
    )
    lineThickness: Optional[LineThickness] = Field(
        '[1.0, 1.0]',
        description='The thickness of grid lines along each axis, in pixels.',
    )
    lineOffset: Optional[LineOffset] = Field(
        '[0.0, 0.0]',
        description='The offset of grid lines along each axis, as a percentage from 0 to 1.',
    )


class StripeOrientation(BaseModel):
    """
    The orientation of stripes in a stripe material.
    """

    stripeOrientation: Optional[StripeOrientationValue] = Field(
        None, description='The orientation of stripes in the stripe material.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The orientation of stripes specified as a reference to another property.',
    )


class CheckerboardMaterial(BaseModel):
    """
    A material that fills the surface with a checkerboard pattern.
    """

    evenColor: Optional[Color] = Field('white', description='The even color.')
    oddColor: Optional[Color] = Field('black', description='The odd color.')
    repeat: Optional[Repeat] = Field(
        '[2, 2]', description='The number of times the tiles repeat along each axis.'
    )


class ShadowMode(BaseModel):
    """
    Whether or not an object casts or receives shadows from each light source when shadows are enabled.
    """

    shadowMode: Optional[ShadowModeValue] = Field(None, description='The shadow mode.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The shadow mode specified as a reference to another property.',
    )


class DistanceDisplayCondition(BaseModel):
    """
    Indicates the visibility of an object based on the distance to the camera.
    """

    distanceDisplayCondition: Optional[DistanceDisplayConditionValue] = Field(
        None,
        description='The value specified as two values `[NearDistance, FarDistance]`, with distances in meters.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The value specified as a reference to another property.'
    )


class SolidColorMaterial(BaseModel):
    """
    A material that fills the surface with a solid color.
    """

    color: Optional[Color] = Field('white', description='The color of the surface.')


class ImageMaterial(BaseModel):
    """
    A material that fills the surface with an image.
    """

    image: Optional[Uri] = Field(
        None, description='The image to display on the surface.'
    )
    repeat: Optional[Repeat] = Field(
        '[1, 1]', description='The number of times the image repeats along each axis.'
    )
    color: Optional[Color] = Field(
        'white',
        description='The color of the image. This color value is multiplied with the image to produce the final color.',
    )
    transparent: Optional[Boolean] = Field(
        False, description='Whether or not the image has transparency.'
    )


class StripeMaterial(BaseModel):
    """
    A material that fills the surface with alternating colors.
    """

    orientation: Optional[StripeOrientation] = Field(
        'HORIZONTAL',
        description='The value indicating if the stripes are horizontal or vertical.',
    )
    evenColor: Optional[Color] = Field('white', description='The even color.')
    oddColor: Optional[Color] = Field('black', description='The odd color.')
    offset: Optional[Double] = Field(
        0.0,
        description='The value indicating where in the pattern to begin drawing, with 0.0 being the beginning of the even color, 1.0 the beginning of the odd color, 2.0 being the even color again, and any multiple or fractional values being in between.',
    )
    repeat: Optional[Double] = Field(
        1.0, description='The number of times the stripes repeat.'
    )


class Material(BaseModel):
    """
    A definition of how a surface is colored or shaded.
    """

    solidColor: Optional[SolidColorMaterial] = Field(
        None,
        description='A material that fills the surface with a solid color, which may be translucent.',
    )
    image: Optional[ImageMaterial] = Field(
        None, description='A material that fills the surface with an image.'
    )
    grid: Optional[GridMaterial] = Field(
        None, description='A material that fills the surface with a grid.'
    )
    stripe: Optional[StripeMaterial] = Field(
        None, description='A material that fills the surface with alternating colors.'
    )
    checkerboard: Optional[CheckerboardMaterial] = Field(
        None,
        description='A material that fills the surface with a checkerboard pattern.',
    )


class Cylinder(BaseModel):
    """
    A cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius.
    """

    show: Optional[Boolean] = Field(
        True, description='Whether or not the cylinder is shown.'
    )
    length: Optional[Double] = Field(None, description='The length of the cylinder.')
    topRadius: Optional[Double] = Field(
        None, description='The radius of the top of the cylinder.'
    )
    bottomRadius: Optional[Double] = Field(
        None, description='The radius of the bottom of the cylinder.'
    )
    heightReference: Optional[HeightReference] = Field(
        'NONE',
        description='The height reference of the cylinder, which indicates if the position is relative to terrain or not.',
    )
    fill: Optional[Boolean] = Field(
        True, description='Whether or not the cylinder is filled.'
    )
    material: Optional[Material] = Field(
        'solid white',
        description='The material to display on the surface of the cylinder.',
    )
    outline: Optional[Boolean] = Field(
        False, description='Whether or not the cylinder is outlined.'
    )
    outlineColor: Optional[Color] = Field(
        'black', description='The color of the cylinder outline.'
    )
    outlineWidth: Optional[Double] = Field(
        1.0, description='The width of the cylinder outline.'
    )
    numberOfVerticalLines: Optional[Integer] = Field(
        16,
        description='The number of vertical lines to draw along the perimeter for the outline.',
    )
    slices: Optional[Integer] = Field(
        128, description='The number of edges around the perimeter of the cylinder.'
    )
    shadows: Optional[ShadowMode] = Field(
        'DISABLED', description='Whether or not the cylinder casts or receives shadows.'
    )
    distanceDisplayCondition: Optional[DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying the distance from the camera at which this cylinder will be displayed.',
    )
