# generated by datamodel-codegen:
#   filename:  Label.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Field

from . import CustomProperty, Cylinder, LabelStyle, Point, Position


class String(BaseModel):
    """
    A string value. The string can optionally vary with time.
    """

    string: Optional[CustomProperty.StringValue] = Field(
        None, description='The string value.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The string specified as a reference to another property.'
    )


class FontValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a CSS font.',
    )


class FontValue(BaseModel):
    __root__: str = Field(
        ...,
        description='A font, specified using the same syntax as the CSS "font" property.',
    )


class LabelStyle(BaseModel):
    """
    The style of a label.
    """

    labelStyle: Optional[LabelStyle.LabelStyleValue] = Field(
        None, description='The label style.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The label style specified as a reference to another property.',
    )


class BackgroundPadding(BaseModel):
    """
    The amount of horizontal and vertical padding, in pixels, between a label's text and its background.
    """

    cartesian2: Optional[Cylinder.Cartesian2Value] = Field(
        None,
        description='The background padding specified as a two-dimensional Cartesian value `[X, Y]`, in pixels, where X is the horizontal padding, and Y is the vertical padding.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The background padding specified as a reference to another property.',
    )


class PixelOffset(BaseModel):
    """
    A pixel offset in viewport coordinates. A pixel offset is the number of pixels up and to the right to place an element relative to an origin.
    """

    cartesian2: Optional[Cylinder.Cartesian2Value] = Field(
        None,
        description='The pixel offset specified as a two-dimensional Cartesian value `[X, Y]`, in viewport coordinates in pixels, where X is pixels to the right and Y is pixels up.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The pixel offset specified as a reference to another property.',
    )


class EyeOffset(BaseModel):
    """
    An offset in eye coordinates which can optionally vary over time. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis poitns up, and the Z-axis points into the screen.
    """

    cartesian: Optional[Position.Cartesian3Value] = Field(
        None,
        description='The eye offset specified as a three-dimensional Cartesian value `[X, Y, Z]`, in eye coordinates in meters. If the array has three elements, the eye offset is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, Time, X, Y, Z, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The eye offset specified as a reference to another property.'
    )


class HorizontalOrigin(BaseModel):
    """
    The horizontal origin of an element, which can optionally vary over time. It controls whether the element is left-, center-, or right-aligned with the `position`.
    """

    horizontalOrigin: Optional[CustomProperty.HorizontalOriginValue] = Field(
        None, description='The horizontal origin.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The horizontal origin specified as a reference to another property.',
    )


class VerticalOrigin(BaseModel):
    """
    The vertical origin of an element, which can optionally vary over time. It controls whether the element is bottom-, center-, or top-aligned with the `position`.
    """

    verticalOrigin: Optional[CustomProperty.VerticalOriginValue] = Field(
        None, description='The vertical origin.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The vertical origin specified as a reference to another property.',
    )


class Font(BaseModel):
    """
    A font used to draw text. Fonts are specified using the same syntax as the CSS "font" property.
    """

    font: Optional[FontValue] = Field(
        None,
        description='The font, specified using the same syntax as the CSS "font" property.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The font specified as a reference to another property.'
    )


class Label(BaseModel):
    """
    A string of text.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the label is shown.'
    )
    text: Optional[String] = Field(
        None,
        description='The text displayed by the label. The newline character (\\n) indicates line breaks.',
    )
    font: Optional[Font] = Field(
        '30px sans-serif', description='The font to use for the label.'
    )
    style: Optional[LabelStyle] = Field('FILL', description='The style of the label.')
    scale: Optional[Cylinder.Double] = Field(
        1.0,
        description="The scale of the label. The scale is multiplied with the pixel size of the label's text. For example, if the scale is 2.0, the label will be rendered with twice the number of pixels, in each direction, of the text.",
    )
    showBackground: Optional[Cylinder.Boolean] = Field(
        False, description='Whether or not a background behind the label is shown.'
    )
    backgroundColor: Optional[Cylinder.Color] = Field(
        '[0.165, 0.165, 0.165, 0.8]',
        description='The color of the background behind the label.',
    )
    backgroundPadding: Optional[BackgroundPadding] = Field(
        '[7, 5]',
        description="The amount of padding between the text and the label's background.",
    )
    pixelOffset: Optional[PixelOffset] = Field(
        '[0.0, 0.0]',
        description='The offset, in viewport pixels, of the label origin from the `position`. A pixel offset is the number of pixels up and to the right to place the label, relative to the `position`.',
    )
    eyeOffset: Optional[EyeOffset] = Field(
        '[0.0, 0.0, 0.0]',
        description="The eye offset of the label, which is the offset in eye coordinates at which to place the label relative to the `position` property. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis points up, and the Z-axis points into the screen.",
    )
    horizontalOrigin: Optional[HorizontalOrigin] = Field(
        'CENTER',
        description='The horizontal origin of the label. It controls whether the label is left-, center-, or right-aligned with the `position`.',
    )
    verticalOrigin: Optional[VerticalOrigin] = Field(
        'CENTER',
        description='The vertical origin of the label. It controls whether the label image is bottom-, center-, or top-aligned with the `position`.',
    )
    heightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The height reference of the label, which indicates if the position is relative to terrain or not.',
    )
    fillColor: Optional[Cylinder.Color] = Field(
        'white', description='The fill color of the label.'
    )
    outlineColor: Optional[Cylinder.Color] = Field(
        'black', description='The outline color of the label.'
    )
    outlineWidth: Optional[Cylinder.Double] = Field(
        1.0, description='The outline width of the label.'
    )
    translucencyByDistance: Optional[Point.NearFarScalar] = Field(
        None,
        description="How the label's translucency should change based on the label's distance from the camera. This scalar value should range from 0 to 1.",
    )
    pixelOffsetScaleByDistance: Optional[Point.NearFarScalar] = Field(
        None,
        description="How the label's pixel offset should change based on the label's distance from the camera. This scalar value will be multiplied by `pixelOffset`.",
    )
    scaleByDistance: Optional[Point.NearFarScalar] = Field(
        None,
        description="How the label's scale should change based on the label's distance from the camera. This scalar value will be multiplied by `scale`.",
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying the distance from the camera at which this label will be displayed.',
    )
    disableDepthTestDistance: Optional[Cylinder.Double] = Field(
        0.0,
        description='The distance from the camera at which to disable the depth test. This can be used to prevent clipping against terrain, for example. When set to zero, the depth test is always applied. When set to Infinity, the depth test is never applied.',
    )
