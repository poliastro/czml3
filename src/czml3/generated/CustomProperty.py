# generated by datamodel-codegen:
#   filename:  CustomProperty.json
#   timestamp: 2021-04-04T10:04:35+00:00

from __future__ import annotations

from typing import List, Optional, Union

import BaseCZMLObject
from pydantic import Field

from .DeletableProperty import DeletableProperty
from .InterpolatableProperty import InterpolatableProperty
from .Values import (
    BooleanValue,
    BoundingRectangleValue,
    Cartesian2Value,
    Cartesian3Value,
    CartographicDegreesValue,
    CartographicRadiansValue,
    CartographicRectangleDegreesValue,
    CartographicRectangleRadiansValue,
    ColorBlendModeValue,
    CornerTypeValue,
    DoubleValue,
    HeightReferenceValue,
    HorizontalOriginValue,
    LabelStyleValue,
    NearFarScalarValue,
    RgbafValue,
    RgbaValue,
    ShadowModeValue,
    SphericalValue,
    StringValue,
    StripeOrientationValue,
    UnitCartesian3Value,
    UnitQuaternionValue,
    UnitSphericalValue,
    UriValue,
    VerticalOriginValue,
)


class CustomProperty1(InterpolatableProperty, DeletableProperty):
    """
    A custom property.
    """

    boolean: Optional[BooleanValue.Boolean] = Field(
        None, description='The property specified as a boolean value.'
    )
    boundingRectangle: Optional[BoundingRectangleValue.BoundingRectangle] = Field(
        None, description='The property specified as `[X, Y, Width, Height]`.'
    )
    cartesian: Optional[Cartesian3Value.Cartesian3] = Field(
        None,
        description='The property specified as a three-dimensional Cartesian value `[X, Y, Z]`.',
    )
    cartographicRadians: Optional[CartographicRadiansValue.CartographicRadians] = Field(
        None,
        description='The property specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height]`, where Longitude and Latitude are in radians and Height is in meters.',
    )
    cartographicDegrees: Optional[CartographicDegreesValue.CartographicDegrees] = Field(
        None,
        description='The property specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )
    cartesian2: Optional[Cartesian2Value.Cartesian2] = Field(
        None,
        description='The property specified as a two-dimensional Cartesian value `[X, Y]`.',
    )
    unitCartesian: Optional[UnitCartesian3Value.UnitCartesian3] = Field(
        None,
        description='The property specified as a three-dimensional unit magnitude Cartesian value `[X, Y, Z]`.',
    )
    spherical: Optional[SphericalValue.Spherical] = Field(
        None,
        description='The property specified as a spherical value `[Clock, Cone, Magnitude]`. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.',
    )
    unitSpherical: Optional[UnitSphericalValue.UnitSpherical] = Field(
        None,
        description='The property specified as a unit spherical value `[Clock, Cone]`. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.',
    )
    rgba: Optional[RgbaValue.Rgba] = Field(
        None,
        description='The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.',
    )
    rgbaf: Optional[RgbafValue.Rgbaf] = Field(
        None,
        description='The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.',
    )
    colorBlendMode: Optional[ColorBlendModeValue.ColorBlendMode] = Field(
        None, description='The property specified as a color blend mode.'
    )
    cornerType: Optional[CornerTypeValue.CornerType] = Field(
        None, description='The property specified as a corner style.'
    )
    heightReference: Optional[HeightReferenceValue.HeightReference] = Field(
        None, description='The property specified as a height reference.'
    )
    horizontalOrigin: Optional[HorizontalOriginValue.HorizontalOrigin] = Field(
        None, description='The property specified as a horizontal origin.'
    )
    labelStyle: Optional[LabelStyleValue.LabelStyle] = Field(
        None, description='The property specified as a label style.'
    )
    number: Optional[DoubleValue.Double] = Field(
        None, description='The property specified as a number.'
    )
    nearFarScalar: Optional[NearFarScalarValue.NearFarScalar] = Field(
        None,
        description='The property specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`.',
    )
    unitQuaternion: Optional[UnitQuaternionValue.UnitQuaternion] = Field(
        None,
        description='The property specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.',
    )
    shadowMode: Optional[ShadowModeValue.ShadowMode] = Field(
        None, description='The property specified as a shadow mode.'
    )
    string: Optional[StringValue.String] = Field(
        None, description='The property specified as a string.'
    )
    stripeOrientation: Optional[StripeOrientationValue.StripeOrientation] = Field(
        None,
        description='The property specified as an orientation of stripes in the stripe material.',
    )
    wsen: Optional[
        CartographicRectangleRadiansValue.CartographicRectangleRadians
    ] = Field(
        None,
        description='The property specified as a Cartographic rectangle `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians.',
    )
    wsenDegrees: Optional[
        CartographicRectangleDegreesValue.CartographicRectangleDegrees
    ] = Field(
        None,
        description='The property specified as a Cartographic rectangle `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees.',
    )
    uri: Optional[UriValue.Uri] = Field(
        None, description='The property specified as a URI.'
    )
    verticalOrigin: Optional[VerticalOriginValue.VerticalOrigin] = Field(
        None, description='The property specified as a vertical origin.'
    )


class CustomProperty(BaseCZMLObject):
    """
    A custom property.
    """

    __root__: Union[List[CustomProperty1], CustomProperty1] = Field(
        ..., description='A custom property.', title='CustomProperty'
    )
