# generated by datamodel-codegen:
#   filename:  CustomProperty.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field

from . import Cylinder, LabelStyle, Model, NearFarScalar, NodeTransformation, Position


class BoundingRectangleValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a bounding rectangle.',
    )


class UnitCartesian3ValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a three-dimensional unit magnitude Cartesian.',
    )


class SphericalValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a spherical.',
    )


class UnitSphericalValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a unit spherical.',
    )


class CornerTypeValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a type of corner.',
    )


class HorizontalOriginValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a horizontal origin.',
    )


class StringValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a string.',
    )


class CartographicRectangleRadiansValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians.',
    )


class CartographicRectangleDegreesValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees.',
    )


class VerticalOriginValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a vertical origin.',
    )


class BoundingRectangleValue(BaseModel):
    """
    A near-far scalar value specified as four values `[X, Y, Width, Height]`. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, X, Y, Width, Height, Time, X, Y, Width, Height, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A near-far scalar value specified as four values `[X, Y, Width, Height]`. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, X, Y, Width, Height, Time, X, Y, Width, Height, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='BoundingRectangle',
    )


class UnitCartesian3Value(BaseModel):
    """
    A three-dimensional unit magnitude Cartesian value specified as `[X, Y, Z]`. If the array has three elements, the value is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, Time, X, Y, Z, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A three-dimensional unit magnitude Cartesian value specified as `[X, Y, Z]`. If the array has three elements, the value is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, Time, X, Y, Z, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='UnitCartesian3',
    )


class SphericalValue(BaseModel):
    """
    A spherical value `[Clock, Cone, Magnitude]`, with angles in radians and magnitude in meters. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis. If the array has three elements, the value is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, Clock, Cone, Magnitude, Time, Clock, Cone, Magnitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A spherical value `[Clock, Cone, Magnitude]`, with angles in radians and magnitude in meters. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis. If the array has three elements, the value is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, Clock, Cone, Magnitude, Time, Clock, Cone, Magnitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='Spherical',
    )


class UnitSphericalValue(BaseModel):
    """
    A unit spherical value specified as `[Clock, Cone]` angles. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, Clock, Cone, Time, Clock, Cone, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A unit spherical value specified as `[Clock, Cone]` angles. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis. If the array has two elements, the value is constant. If it has three or more elements, they are time-tagged samples arranged as `[Time, Clock, Cone, Time, Clock, Cone, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='UnitSpherical',
    )


class CornerTypeValue(BaseModel):
    __root__: str = Field(..., description='The style of a corner.')


class HorizontalOriginValue(BaseModel):
    __root__: str = Field(
        ...,
        description="The horizontal location of an origin relative to an object's position.",
    )


class StringValue(BaseModel):
    __root__: str = Field(..., description='A string value.')


class CartographicRectangleRadiansValue(BaseModel):
    """
    A two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='CartographicRectangleRadians',
    )


class CartographicRectangleDegreesValue(BaseModel):
    """
    A two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A two-dimensional region specified as `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, Time, WestLongitude, SouthLatitude, EastLongitude, NorthLatitude, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='CartographicRectangleDegrees',
    )


class VerticalOriginValue(BaseModel):
    __root__: str = Field(
        ...,
        description="The vertical location of an origin relative to an object's position.",
    )


class CustomProperty(BaseModel):
    """
    A custom property.
    """

    boolean: Optional[Cylinder.BooleanValue] = Field(
        None, description='The property specified as a boolean value.'
    )
    boundingRectangle: Optional[BoundingRectangleValue] = Field(
        None, description='The property specified as `[X, Y, Width, Height]`.'
    )
    cartesian: Optional[Position.Cartesian3Value] = Field(
        None,
        description='The property specified as a three-dimensional Cartesian value `[X, Y, Z]`.',
    )
    cartographicRadians: Optional[Position.CartographicRadiansValue] = Field(
        None,
        description='The property specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height]`, where Longitude and Latitude are in radians and Height is in meters.',
    )
    cartographicDegrees: Optional[Position.CartographicDegreesValue] = Field(
        None,
        description='The property specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )
    cartesian2: Optional[Cylinder.Cartesian2Value] = Field(
        None,
        description='The property specified as a two-dimensional Cartesian value `[X, Y]`.',
    )
    unitCartesian: Optional[UnitCartesian3Value] = Field(
        None,
        description='The property specified as a three-dimensional unit magnitude Cartesian value `[X, Y, Z]`.',
    )
    spherical: Optional[SphericalValue] = Field(
        None,
        description='The property specified as a spherical value `[Clock, Cone, Magnitude]`. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.',
    )
    unitSpherical: Optional[UnitSphericalValue] = Field(
        None,
        description='The property specified as a unit spherical value `[Clock, Cone]`. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.',
    )
    rgba: Optional[Cylinder.RgbaValue] = Field(
        None,
        description='The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.',
    )
    rgbaf: Optional[Cylinder.RgbafValue] = Field(
        None,
        description='The property specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.',
    )
    colorBlendMode: Optional[Model.ColorBlendModeValue] = Field(
        None, description='The property specified as a color blend mode.'
    )
    cornerType: Optional[CornerTypeValue] = Field(
        None, description='The property specified as a corner style.'
    )
    heightReference: Optional[Cylinder.HeightReferenceValue] = Field(
        None, description='The property specified as a height reference.'
    )
    horizontalOrigin: Optional[HorizontalOriginValue] = Field(
        None, description='The property specified as a horizontal origin.'
    )
    labelStyle: Optional[LabelStyle.LabelStyleValue] = Field(
        None, description='The property specified as a label style.'
    )
    number: Optional[Cylinder.DoubleValue] = Field(
        None, description='The property specified as a number.'
    )
    nearFarScalar: Optional[NearFarScalar.NearFarScalarValue] = Field(
        None,
        description='The property specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`.',
    )
    unitQuaternion: Optional[NodeTransformation.UnitQuaternionValue] = Field(
        None,
        description='The property specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.',
    )
    shadowMode: Optional[Cylinder.ShadowModeValue] = Field(
        None, description='The property specified as a shadow mode.'
    )
    string: Optional[StringValue] = Field(
        None, description='The property specified as a string.'
    )
    stripeOrientation: Optional[Cylinder.StripeOrientationValue] = Field(
        None,
        description='The property specified as an orientation of stripes in the stripe material.',
    )
    wsen: Optional[CartographicRectangleRadiansValue] = Field(
        None,
        description='The property specified as a Cartographic rectangle `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians.',
    )
    wsenDegrees: Optional[CartographicRectangleDegreesValue] = Field(
        None,
        description='The property specified as a Cartographic rectangle `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees.',
    )
    uri: Optional[Cylinder.UriValue] = Field(
        None, description='The property specified as a URI.'
    )
    verticalOrigin: Optional[VerticalOriginValue] = Field(
        None, description='The property specified as a vertical origin.'
    )
