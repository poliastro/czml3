# generated by datamodel-codegen:
#   filename:  Model.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Extra, Field

from . import Cylinder, LabelStyle, NodeTransformation


class ColorBlendModeValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a type of arc.',
    )


class ColorBlendModeValue(BaseModel):
    __root__: str = Field(
        ...,
        description="The mode of blending between a target color and an entity's source color.",
    )


class NodeTransformations(BaseModel):
    """
    A mapping of node names to node transformations.
    """

    pass

    class Config:
        extra = Extra.allow


class Articulations(BaseModel):
    """
    A mapping of keys to articulation values, where the keys are the name of the articulation, a single space, and the name of the stage.
    """

    pass

    class Config:
        extra = Extra.allow


class Articulation(BaseModel):
    """
    An articulation value.
    """

    number: Optional[Cylinder.DoubleValue] = Field(
        None, description='The articulation value.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The articulation value specified as a reference to another property.',
    )


class ColorBlendMode(BaseModel):
    """
    The mode of blending between a target color and an entity's source color.
    """

    colorBlendMode: Optional[ColorBlendModeValue] = Field(
        None, description='The color blend mode.'
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The color blend mode specified as a reference to another property.',
    )


class NodeTransformation(BaseModel):
    """
    A set of transformations to apply to a particular node in a 3D model.
    """

    translation: Optional[NodeTransformation.Translation] = Field(
        '[0.0, 0.0, 0.0]', description='The translation to apply to the model node.'
    )
    rotation: Optional[NodeTransformation.Rotation] = Field(
        '[0.0, 0.0, 0.0, 1.0]', description='The rotation to apply to the model node.'
    )
    scale: Optional[NodeTransformation.Scale] = Field(
        '[1.0, 1.0, 1.0]', description='The scaling to apply to the model node.'
    )


class Model(BaseModel):
    """
    A 3D model.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the model is shown.'
    )
    gltf: Optional[Cylinder.Uri] = Field(
        None,
        description='The URI of a <a href="https://github.com/KhronosGroup/glTF">glTF</a> model. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). The URI may also be a <a href="https://developer.mozilla.org/en/data_URIs">data URI</a>.',
    )
    scale: Optional[Cylinder.Double] = Field(1.0, description='The scale of the model.')
    minimumPixelSize: Optional[Cylinder.Double] = Field(
        0.0,
        description='The approximate minimum pixel size of the model regardless of zoom.',
    )
    maximumScale: Optional[Cylinder.Double] = Field(
        None,
        description='The maximum scale size of the model. This is used as an upper limit for `minimumPixelSize`.',
    )
    incrementallyLoadTextures: Optional[Cylinder.Boolean] = Field(
        True,
        description='Whether or not the model can be rendered before all textures have loaded.',
    )
    runAnimations: Optional[Cylinder.Boolean] = Field(
        True,
        description='Whether or not to run all animations defined in the glTF model.',
    )
    shadows: Optional[Cylinder.ShadowMode] = Field(
        'ENABLED', description='Whether or not the model casts or receives shadows.'
    )
    heightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The height reference of the model, which indicates if the position is relative to terrain or not.',
    )
    silhouetteColor: Optional[Cylinder.Color] = Field(
        'red', description='The color of the silhouette drawn around the model.'
    )
    silhouetteSize: Optional[Cylinder.Double] = Field(
        0.0,
        description='The size, in pixels, of the silhouette drawn around the model.',
    )
    color: Optional[Cylinder.Color] = Field(
        'white', description="The color to blend with the model's rendered color."
    )
    colorBlendMode: Optional[ColorBlendMode] = Field(
        'HIGHLIGHT',
        description="The mode to use for blending between `color` and the model's color.",
    )
    colorBlendAmount: Optional[Cylinder.Double] = Field(
        0.5,
        description="The color strength when `colorBlendMode` is `MIX`. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.",
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying at what distance from the camera this model will be displayed.',
    )
    nodeTransformations: Optional[NodeTransformations] = None
    articulations: Optional[Articulations] = None
