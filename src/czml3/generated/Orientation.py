# generated by datamodel-codegen:
#   filename:  Orientation.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Field

from . import LabelStyle, NodeTransformation


class VelocityReferenceValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a normalized velocity vector of a position property. The reference must be to a `position` property.',
    )


class VelocityReferenceValue(BaseModel):
    __root__: str = Field(
        ...,
        description='Represents the normalized velocity vector of a position property. The reference must be to a `position` property.',
    )


class Orientation(BaseModel):
    """
    Defines an orientation. An orientation is a rotation that takes a vector expressed in the "body" axes of the object and transforms it to the Earth fixed axes.
    """

    unitQuaternion: Optional[NodeTransformation.UnitQuaternionValue] = Field(
        None,
        description='The orientation specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The orientation specified as a reference to another property.',
    )
    velocityReference: Optional[VelocityReferenceValue] = Field(
        None,
        description='The orientation specified as the normalized velocity vector of a position property. The reference must be to a `position` property.',
    )
