# generated by datamodel-codegen:
#   filename:  Integer.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field

from . import LabelStyle


class InterpolatableProperty(BaseModel):
    """
    The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
    """

    epoch: Optional[datetime] = Field(
        None,
        description='The epoch to use for times specified as seconds since an epoch.',
    )
    interpolationAlgorithm: Optional[str] = Field(
        'LINEAR',
        description='The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".',
    )
    interpolationDegree: Optional[float] = Field(
        1, description='The degree of interpolation to use when interpolating.'
    )
    forwardExtrapolationType: Optional[str] = Field(
        'NONE',
        description='The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".',
    )
    forwardExtrapolationDuration: Optional[float] = Field(
        0.0,
        description='The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.',
    )
    backwardExtrapolationType: Optional[str] = Field(
        'NONE',
        description='The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".',
    )
    backwardExtrapolationDuration: Optional[float] = Field(
        0.0,
        description='The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.',
    )


class IntegerValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as an integer.',
    )


class IntegerValue(BaseModel):
    __root__: Union[int, List[Any]] = Field(
        ...,
        description='An integer number. The value may be a single integer, or an array with one element, in which case the value is constant. If it is an array with two or more elements, they are time-tagged samples arranged as `[Time, Value, Time, Value, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
    )


class Integer(BaseModel):
    """
    An integer number.
    """

    number: Optional[IntegerValue] = Field(None, description='The integer.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The integer specified as a reference to another property.'
    )
