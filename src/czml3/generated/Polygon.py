# generated by datamodel-codegen:
#   filename:  Polygon.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field

from . import Cylinder, LabelStyle, Rectangle


class Cartesian3ListValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of three-dimensional Cartesian values.',
    )


class CartographicRadiansListValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
    )


class CartographicDegreesListValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )


class ReferenceListValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of references to other properties.',
    )


class Cartesian3ListValue(BaseModel):
    """
    A list of three-dimensional Cartesian values specified as `[X, Y, Z, X, Y, Z, ...]`.
    """

    __root__: List[float] = Field(
        ...,
        description='A list of three-dimensional Cartesian values specified as `[X, Y, Z, X, Y, Z, ...]`.',
        title='Cartesian3List',
    )


class CartographicRadiansListValue(BaseModel):
    """
    A list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.
    """

    __root__: List[float] = Field(
        ...,
        description='A list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
        title='CartographicRadiansList',
    )


class CartographicDegreesListValue(BaseModel):
    """
    A list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.
    """

    __root__: List[float] = Field(
        ...,
        description='A list of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
        title='CartographicDegreesList',
    )


class ReferenceListValue(BaseModel):
    """
    A list of references to other properties.
    """

    __root__: List[str] = Field(
        ...,
        description='A list of references to other properties.',
        title='ReferenceList',
    )


class Cartesian3ListOfListsValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of lists of three-dimensional Cartesian values.',
    )


class CartographicRadiansListOfListsValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
    )


class CartographicDegreesListOfListsValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )


class ReferenceListOfListsValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of lists of references to other properties.',
    )


class Cartesian3ListOfListsValue(BaseModel):
    """
    A list of lists of three-dimensional Cartesian values specified as `[X, Y, Z, X, Y, Z, ...]`.
    """

    __root__: List[List] = Field(
        ...,
        description='A list of lists of three-dimensional Cartesian values specified as `[X, Y, Z, X, Y, Z, ...]`.',
        title='Cartesian3ListOfLists',
    )


class CartographicRadiansListOfListsValue(BaseModel):
    """
    A list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.
    """

    __root__: List[List] = Field(
        ...,
        description='A list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
        title='CartographicRadiansListOfLists',
    )


class CartographicDegreesListOfListsValue(BaseModel):
    """
    A list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.
    """

    __root__: List[List] = Field(
        ...,
        description='A list of lists of geodetic, WGS84 positions specified as `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
        title='CartographicDegreesListOfLists',
    )


class ReferenceListOfListsValue(BaseModel):
    """
    A list of lists of references to other properties.
    """

    __root__: List[List] = Field(
        ...,
        description='A list of lists of references to other properties.',
        title='ReferenceListOfLists',
    )


class ArcTypeValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a type of arc.',
    )


class ArcTypeValue(BaseModel):
    __root__: str = Field(..., description='The type of an arc.')


class PositionList(BaseModel):
    """
    A list of positions.
    """

    referenceFrame: Optional[str] = Field(
        'FIXED',
        description='The reference frame in which cartesian positions are specified. Possible values are "FIXED" and "INERTIAL".',
    )
    cartesian: Optional[Cartesian3ListValue] = Field(
        None,
        description='The list of positions specified as three-dimensional Cartesian values, `[X, Y, Z, X, Y, Z, ...]`, in meters relative to the `referenceFrame`.',
    )
    cartographicRadians: Optional[CartographicRadiansListValue] = Field(
        None,
        description='The list of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
    )
    cartographicDegrees: Optional[CartographicDegreesListValue] = Field(
        None,
        description='The list of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )
    references: Optional[ReferenceListValue] = Field(
        None,
        description='The list of positions specified as references. Each reference is to a property that defines a single position, which may change with time.',
    )


class PositionListOfLists(BaseModel):
    """
    A list of lists of positions.
    """

    cartesian: Optional[Cartesian3ListOfListsValue] = Field(
        None,
        description='The list of lists of positions specified as three-dimensional Cartesian values, `[X, Y, Z, X, Y, Z, ...]`, in meters relative to the `referenceFrame`.',
    )
    cartographicRadians: Optional[CartographicRadiansListOfListsValue] = Field(
        None,
        description='The list of lists of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in radians and Height is in meters.',
    )
    cartographicDegrees: Optional[CartographicDegreesListOfListsValue] = Field(
        None,
        description='The list of lists of positions specified in Cartographic WGS84 coordinates, `[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]`, where Longitude and Latitude are in degrees and Height is in meters.',
    )
    references: Optional[ReferenceListOfListsValue] = Field(
        None,
        description='The list of lists of positions specified as references. Each reference is to a property that defines a single position, which may change with time.',
    )


class ArcType(BaseModel):
    """
    The type of an arc.
    """

    arcType: Optional[ArcTypeValue] = Field(None, description='The arc type.')
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The arc type specified as a reference to another property.'
    )


class Polygon(BaseModel):
    """
    A polygon, which is a closed figure on the surface of the Earth.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the polygon is shown.'
    )
    positions: Optional[PositionList] = Field(
        None, description='The array of positions defining a simple polygon.'
    )
    holes: Optional[PositionListOfLists] = Field(
        None,
        description='The array of arrays of positions defining holes in the polygon.',
    )
    arcType: Optional[ArcType] = Field(
        'GEODESIC',
        description='The type of arc that should connect the positions of the polygon.',
    )
    height: Optional[Cylinder.Double] = Field(
        0.0, description='The height of the polygon when `perPositionHeight` is false.'
    )
    heightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The height reference of the polygon, which indicates if `height` is relative to terrain or not.',
    )
    extrudedHeight: Optional[Cylinder.Double] = Field(
        None, description='The extruded height of the polygon.'
    )
    extrudedHeightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The extruded height reference of the polygon, which indicates if `extrudedHeight` is relative to terrain or not.',
    )
    stRotation: Optional[Cylinder.Double] = Field(
        0.0,
        description='The rotation of any applied texture. A positive rotation is counter-clockwise.',
    )
    granularity: Optional[Cylinder.Double] = Field(
        'π / 180.0', description='The sampling distance, in radians.'
    )
    fill: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the polygon is filled.'
    )
    material: Optional[Cylinder.Material] = Field(
        'solid white', description='The material to use to fill the polygon.'
    )
    outline: Optional[Cylinder.Boolean] = Field(
        False, description='Whether or not the polygon is outlined.'
    )
    outlineColor: Optional[Cylinder.Color] = Field(
        'black', description='The color of the polygon outline.'
    )
    outlineWidth: Optional[Cylinder.Double] = Field(
        1.0, description='The width of the polygon outline.'
    )
    perPositionHeight: Optional[Cylinder.Boolean] = Field(
        False,
        description='Whether to use the height of each position to define the polygon or to use `height` as a constant height above the surface.',
    )
    closeTop: Optional[Cylinder.Boolean] = Field(
        True, description='Whether to close the top of the polygon.'
    )
    closeBottom: Optional[Cylinder.Boolean] = Field(
        True, description='Whether to close the bottom of the polygon.'
    )
    shadows: Optional[Cylinder.ShadowMode] = Field(
        'DISABLED', description='Whether or not the polygon casts or receives shadows.'
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying the distance from the camera at which this polygon will be displayed.',
    )
    classificationType: Optional[Rectangle.ClassificationType] = Field(
        'BOTH',
        description='Whether a classification affects terrain, 3D Tiles, or both.',
    )
    zIndex: Optional[Cylinder.Integer] = Field(
        '0',
        description='The z-index of the polygon, used for ordering ground geometry. Only has an effect if the polygon is constant, and `height` and `extrudedHeight` are not specified.',
    )
