# generated by datamodel-codegen:
#   filename:  NodeTransformation.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field

from . import LabelStyle, Position


class Translation(BaseModel):
    """
    A translational offset which can optionally vary over time.
    """

    cartesian: Optional[Position.Cartesian3Value] = Field(
        None,
        description='The translation specified as a three-dimensional Cartesian value `[X, Y, Z]`, in meters.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The translation specified as a reference to another property.',
    )


class UnitQuaternionValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.',
    )


class UnitQuaternionValue(BaseModel):
    """
    A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space, specified as `[X, Y, Z, W]`. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, W, Time, X, Y, Z, W, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
    """

    __root__: List = Field(
        ...,
        description='A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space, specified as `[X, Y, Z, W]`. If the array has four elements, the value is constant. If it has five or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, W, Time, X, Y, Z, W, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.',
        title='UnitQuaternion',
    )


class Scale(BaseModel):
    """
    A scaling factor which can optionally vary over time.
    """

    cartesian: Optional[Position.Cartesian3Value] = Field(
        None,
        description='The scale specified as a three-dimensional Cartesian value `[X, Y, Z]`.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The scale specified as a reference to another property.'
    )


class Rotation(BaseModel):
    """
    Defines a rotation that transforms a vector expressed in one axes and transforms it to another.
    """

    unitQuaternion: Optional[UnitQuaternionValue] = Field(
        None,
        description='The rotation specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None, description='The rotation specified as a reference to another property.'
    )


class NodeTransformation(BaseModel):
    """
    A set of transformations to apply to a particular node in a 3D model.
    """

    translation: Optional[Translation] = Field(
        '[0.0, 0.0, 0.0]', description='The translation to apply to the model node.'
    )
    rotation: Optional[Rotation] = Field(
        '[0.0, 0.0, 0.0, 1.0]', description='The rotation to apply to the model node.'
    )
    scale: Optional[Scale] = Field(
        '[1.0, 1.0, 1.0]', description='The scaling to apply to the model node.'
    )
