# generated by datamodel-codegen:
#   filename:  Clock.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class TimeValue(BaseModel):
    __root__: str = Field(..., description='A time, specified in ISO8601 format.')


class ClockRangeValue(BaseModel):
    __root__: str = Field(
        ...,
        description='The behavior of a clock when its current time reaches its start or end time.',
    )


class ClockStepValue(BaseModel):
    __root__: str = Field(..., description='Defines how a clock advances each tick.')


class Clock(BaseModel):
    """
    Initial settings for a simulated clock when a document is loaded. The start and stop time are configured using the interval property.
    """

    currentTime: Optional[TimeValue] = Field(
        None, description='The current time, specified in ISO8601 format.'
    )
    multiplier: Optional[float] = Field(
        1.0,
        description='The multiplier. When `step` is set to `TICK_DEPENDENT`, this is the number of seconds to advance each tick. When `step` is set to `SYSTEM_CLOCK_DEPENDENT`, this is multiplied by the elapsed system time between ticks. This value is ignored in `SYSTEM_CLOCK` mode.',
    )
    range: Optional[ClockRangeValue] = Field(
        'LOOP_STOP',
        description='The behavior when the current time reaches its start or end times.',
    )
    step: Optional[ClockStepValue] = Field(
        'SYSTEM_CLOCK_MULTIPLIER',
        description='How the current time advances each tick.',
    )
