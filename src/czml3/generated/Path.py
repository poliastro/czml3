# generated by datamodel-codegen:
#   filename:  Path.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field

from . import Cylinder


class PolylineOutlineMaterial(BaseModel):
    """
    A material that fills the surface of a line with an outlined color.
    """

    color: Optional[Cylinder.Color] = Field(
        'white', description='The color of the surface.'
    )
    outlineColor: Optional[Cylinder.Color] = Field(
        'black', description='The color of the surface outline.'
    )
    outlineWidth: Optional[Cylinder.Double] = Field(
        1.0, description='The width of the outline.'
    )


class PolylineArrowMaterial(BaseModel):
    """
    A material that fills the surface of a line with an arrow.
    """

    color: Optional[Cylinder.Color] = Field(
        'white', description='The color of the surface.'
    )


class PolylineDashMaterial(BaseModel):
    """
    A material that fills the surface of a line with a pattern of dashes.
    """

    color: Optional[Cylinder.Color] = Field(
        'white', description='The color of the dashes on the line.'
    )
    gapColor: Optional[Cylinder.Color] = Field(
        'transparent', description='The color of the gaps between dashes on the line.'
    )
    dashLength: Optional[Cylinder.Double] = Field(
        16.0,
        description='The length in screen-space pixels of a single dash and gap pattern.',
    )
    dashPattern: Optional[Cylinder.Integer] = Field(
        255,
        description='A 16-bit bitfield representing which portions along a single dashLength are the dash (1) and which are the gap (0). The default value, 255 (0000000011111111), indicates 50% gap followed by 50% dash.',
    )


class PolylineGlowMaterial(BaseModel):
    """
    A material that fills the surface of a line with a glowing color.
    """

    color: Optional[Cylinder.Color] = Field(
        'white', description='The color of the surface.'
    )
    glowPower: Optional[Cylinder.Double] = Field(
        0.25, description='The strength of the glow.'
    )
    taperPower: Optional[Cylinder.Double] = Field(
        1.0,
        description='The strength of the tapering effect.  1.0 and higher means no tapering.',
    )


class PolylineMaterial(BaseModel):
    """
    A definition of how a polyline is colored or shaded.
    """

    solidColor: Optional[Cylinder.SolidColorMaterial] = Field(
        None,
        description='A material that fills the line with a solid color, which may be translucent.',
    )
    polylineOutline: Optional[PolylineOutlineMaterial] = Field(
        None, description='A material that fills the line with a color and outline.'
    )
    polylineArrow: Optional[PolylineArrowMaterial] = Field(
        None, description='A material that fills the line with an arrow.'
    )
    polylineDash: Optional[PolylineDashMaterial] = Field(
        None, description='A material that fills the line with a pattern of dashes.'
    )
    polylineGlow: Optional[PolylineGlowMaterial] = Field(
        None, description='A material that fills the line with a glowing color.'
    )
    image: Optional[Cylinder.ImageMaterial] = Field(
        None, description='A material that fills the line with an image.'
    )
    grid: Optional[Cylinder.GridMaterial] = Field(
        None, description='A material that fills the line with a grid.'
    )
    stripe: Optional[Cylinder.StripeMaterial] = Field(
        None, description='A material that fills the line with alternating colors.'
    )
    checkerboard: Optional[Cylinder.CheckerboardMaterial] = Field(
        None, description='A material that fills the line with a checkerboard pattern.'
    )


class Path(BaseModel):
    """
    A path, which is a polyline defined by the motion of an object over time. The possible vertices of the path are specified by the `position` property. Note that because clients cannot render a truly infinite path, the path must be limited, either by defining availability for this object, or by using the `leadTime` and `trailTime` properties.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the path is shown.'
    )
    leadTime: Optional[Cylinder.Double] = Field(
        None,
        description="The time ahead of the animation time, in seconds, to show the path. The time will be limited to not exceed the object's availability. By default, the value is unlimited, which effectively results in drawing the entire available path of the object.",
    )
    trailTime: Optional[Cylinder.Double] = Field(
        None,
        description="The time behind the animation time, in seconds, to show the path. The time will be limited to not exceed the object's availability. By default, the value is unlimited, which effectively results in drawing the entire available path of the object.",
    )
    width: Optional[Cylinder.Double] = Field(
        1.0, description='The width of the path line.'
    )
    resolution: Optional[Cylinder.Double] = Field(
        60.0,
        description='The maximum step-size, in seconds, used to sample the path. If the `position` property has data points farther apart than resolution specifies, additional samples will be computed, creating a smoother path.',
    )
    material: Optional[PolylineMaterial] = Field(
        'solid white', description='The material to use to draw the path.'
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying at what distance from the camera this path will be displayed.',
    )
