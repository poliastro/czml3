# generated by datamodel-codegen:
#   filename:  PolylineVolume.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field

from . import Corridor, Cylinder, Polygon


class Cartesian2ListValueProperty(BaseModel):
    __root__: Any = Field(
        ...,
        description='The base schema for a property whose value may be written as a list of two-dimensional Cartesian values.',
    )


class Cartesian2ListValue(BaseModel):
    """
    A list of two-dimensional Cartesian values specified as `[X, Y, X, Y, ...]`.
    """

    __root__: List[float] = Field(
        ...,
        description='A list of two-dimensional Cartesian values specified as `[X, Y, X, Y, ...]`.',
        title='Cartesian2List',
    )


class Shape(BaseModel):
    """
    A list of two-dimensional positions defining a shape.
    """

    cartesian2: Optional[Cartesian2ListValue] = Field(
        None,
        description='The list of positions specified as two-dimensional Cartesian values `[X, Y, X, Y, ...]`.',
    )


class PolylineVolume(BaseModel):
    """
    A polyline with a volume, defined as a 2D shape extruded along a polyline that conforms to the curvature of the globe.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the volume is shown.'
    )
    positions: Optional[Polygon.PositionList] = Field(
        None,
        description='The array of positions defining the center of the polyline volume.',
    )
    shape: Optional[Shape] = Field(
        None,
        description='The array of positions defining the shape of the volume to be extruded.',
    )
    cornerType: Optional[Corridor.CornerType] = Field(
        'ROUNDED', description='The style of the corners of the volume.'
    )
    granularity: Optional[Cylinder.Double] = Field(
        'Ï€ / 180.0', description='The sampling distance, in radians.'
    )
    fill: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the volume is filled.'
    )
    material: Optional[Cylinder.Material] = Field(
        'solid white', description='The material to use to fill the volume.'
    )
    outline: Optional[Cylinder.Boolean] = Field(
        False, description='Whether or not the volume is outlined.'
    )
    outlineColor: Optional[Cylinder.Color] = Field(
        'black', description='The color of the volume outline.'
    )
    outlineWidth: Optional[Cylinder.Double] = Field(
        1.0, description='The width of the volume outline.'
    )
    shadows: Optional[Cylinder.ShadowMode] = Field(
        'DISABLED', description='Whether or not the volume casts or receives shadows.'
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying the distance from the camera at which this volume will be displayed.',
    )
