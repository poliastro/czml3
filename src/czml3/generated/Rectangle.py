# generated by datamodel-codegen:
#   filename:  Rectangle.json
#   timestamp: 2021-03-29T05:46:25+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field

from . import ClassificationType, CustomProperty, Cylinder, LabelStyle


class RectangleCoordinates(BaseModel):
    """
    A set of coordinates describing a cartographic rectangle on the surface of the ellipsoid.
    """

    wsen: Optional[CustomProperty.CartographicRectangleRadiansValue] = Field(
        None,
        description='The set of coordinates specified as Cartographic values `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in radians.',
    )
    wsenDegrees: Optional[CustomProperty.CartographicRectangleDegreesValue] = Field(
        None,
        description='The set of coordinates specified as Cartographic values `[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]`, with values in degrees.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The set of coordinates specified as a reference to another property.',
    )


class ClassificationType(BaseModel):
    """
    Whether a classification affects terrain, 3D Tiles, or both.
    """

    classificationType: Optional[ClassificationType.ClassificationTypeValue] = Field(
        None,
        description='The classification type, which indicates whether a classification affects terrain, 3D Tiles, or both.',
    )
    reference: Optional[LabelStyle.ReferenceValue] = Field(
        None,
        description='The classification type specified as a reference to another property.',
    )


class Rectangle(BaseModel):
    """
    A cartographic rectangle, which conforms to the curvature of the globe and can be placed on the surface or at altitude and can optionally be extruded into a volume.
    """

    show: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the rectangle is shown.'
    )
    coordinates: Optional[RectangleCoordinates] = Field(
        None, description='The coordinates of the rectangle.'
    )
    height: Optional[Cylinder.Double] = Field(
        0.0, description='The height of the rectangle.'
    )
    heightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The height reference of the rectangle, which indicates if `height` is relative to terrain or not.',
    )
    extrudedHeight: Optional[Cylinder.Double] = Field(
        None, description='The extruded height of the rectangle.'
    )
    extrudedHeightReference: Optional[Cylinder.HeightReference] = Field(
        'NONE',
        description='The extruded height reference of the rectangle, which indicates if `extrudedHeight` is relative to terrain or not.',
    )
    rotation: Optional[Cylinder.Double] = Field(
        0.0, description='The rotation of the rectangle clockwise from north.'
    )
    stRotation: Optional[Cylinder.Double] = Field(
        0.0,
        description='The rotation of any applied texture. A positive rotation is counter-clockwise.',
    )
    granularity: Optional[Cylinder.Double] = Field(
        'Ï€ / 180.0', description='The sampling distance, in radians.'
    )
    fill: Optional[Cylinder.Boolean] = Field(
        True, description='Whether or not the rectangle is filled.'
    )
    material: Optional[Cylinder.Material] = Field(
        'solid white',
        description='The material to display on the surface of the rectangle.',
    )
    outline: Optional[Cylinder.Boolean] = Field(
        False, description='Whether or not the rectangle is outlined.'
    )
    outlineColor: Optional[Cylinder.Color] = Field(
        'black', description='The color of the rectangle outline.'
    )
    outlineWidth: Optional[Cylinder.Double] = Field(
        1.0, description='The width of the rectangle outline.'
    )
    shadows: Optional[Cylinder.ShadowMode] = Field(
        'DISABLED',
        description='Whether or not the rectangle casts or receives shadows.',
    )
    distanceDisplayCondition: Optional[Cylinder.DistanceDisplayCondition] = Field(
        None,
        description='The display condition specifying at what distance from the camera this rectangle will be displayed.',
    )
    classificationType: Optional[ClassificationType] = Field(
        'BOTH',
        description='Whether a classification affects terrain, 3D Tiles, or both.',
    )
    zIndex: Optional[Cylinder.Integer] = Field(
        '0',
        description='The z-index of the rectangle, used for ordering ground geometry. Only has an effect if the rectangle is constant, and `height` and `extrudedHeight` are not specified.',
    )
